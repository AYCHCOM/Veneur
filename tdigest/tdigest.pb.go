// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tdigest/tdigest.proto

/*
	Package tdigest is a generated protocol buffer package.

	It is generated from these files:
		tdigest/tdigest.proto

	It has these top-level messages:
		MergingDigestData
		Centroid
*/
package tdigest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import encoding_binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// MergingDigestData contains all fields necessary to generate a MergingDigest.
// This type should generally just be used when serializing MergingDigest's,
// and doesn't have much of a purpose on its own.
type MergingDigestData struct {
	// Use values rather than pointers for the Centroid array.  This avoids
	// a ton of code changes and probably a lot of allocations as well.
	MainCentroids []Centroid `protobuf:"bytes,1,rep,name=main_centroids,json=mainCentroids" json:"main_centroids"`
	Compression   float64    `protobuf:"fixed64,2,opt,name=compression,proto3" json:"compression,omitempty"`
	Min           float64    `protobuf:"fixed64,3,opt,name=min,proto3" json:"min,omitempty"`
	Max           float64    `protobuf:"fixed64,4,opt,name=max,proto3" json:"max,omitempty"`
	ReciprocalSum float64    `protobuf:"fixed64,5,opt,name=reciprocalSum,proto3" json:"reciprocalSum,omitempty"`
}

func (m *MergingDigestData) Reset()                    { *m = MergingDigestData{} }
func (m *MergingDigestData) String() string            { return proto.CompactTextString(m) }
func (*MergingDigestData) ProtoMessage()               {}
func (*MergingDigestData) Descriptor() ([]byte, []int) { return fileDescriptorTdigest, []int{0} }

func (m *MergingDigestData) GetMainCentroids() []Centroid {
	if m != nil {
		return m.MainCentroids
	}
	return nil
}

func (m *MergingDigestData) GetCompression() float64 {
	if m != nil {
		return m.Compression
	}
	return 0
}

func (m *MergingDigestData) GetMin() float64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *MergingDigestData) GetMax() float64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *MergingDigestData) GetReciprocalSum() float64 {
	if m != nil {
		return m.ReciprocalSum
	}
	return 0
}

type Centroid struct {
	Mean    float64   `protobuf:"fixed64,1,opt,name=mean,proto3" json:"mean,omitempty"`
	Weight  float64   `protobuf:"fixed64,2,opt,name=weight,proto3" json:"weight,omitempty"`
	Samples []float64 `protobuf:"fixed64,3,rep,packed,name=samples" json:"samples,omitempty"`
}

func (m *Centroid) Reset()                    { *m = Centroid{} }
func (m *Centroid) String() string            { return proto.CompactTextString(m) }
func (*Centroid) ProtoMessage()               {}
func (*Centroid) Descriptor() ([]byte, []int) { return fileDescriptorTdigest, []int{1} }

func (m *Centroid) GetMean() float64 {
	if m != nil {
		return m.Mean
	}
	return 0
}

func (m *Centroid) GetWeight() float64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Centroid) GetSamples() []float64 {
	if m != nil {
		return m.Samples
	}
	return nil
}

func init() {
	proto.RegisterType((*MergingDigestData)(nil), "tdigest.MergingDigestData")
	proto.RegisterType((*Centroid)(nil), "tdigest.Centroid")
}
func (m *MergingDigestData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MergingDigestData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.MainCentroids) > 0 {
		for _, msg := range m.MainCentroids {
			dAtA[i] = 0xa
			i++
			i = encodeVarintTdigest(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Compression != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Compression))))
		i += 8
	}
	if m.Min != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Min))))
		i += 8
	}
	if m.Max != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Max))))
		i += 8
	}
	if m.ReciprocalSum != 0 {
		dAtA[i] = 0x29
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ReciprocalSum))))
		i += 8
	}
	return i, nil
}

func (m *Centroid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Centroid) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Mean != 0 {
		dAtA[i] = 0x9
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Mean))))
		i += 8
	}
	if m.Weight != 0 {
		dAtA[i] = 0x11
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Weight))))
		i += 8
	}
	if len(m.Samples) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintTdigest(dAtA, i, uint64(len(m.Samples)*8))
		for _, num := range m.Samples {
			f1 := math.Float64bits(float64(num))
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
			i += 8
		}
	}
	return i, nil
}

func encodeVarintTdigest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *MergingDigestData) Size() (n int) {
	var l int
	_ = l
	if len(m.MainCentroids) > 0 {
		for _, e := range m.MainCentroids {
			l = e.Size()
			n += 1 + l + sovTdigest(uint64(l))
		}
	}
	if m.Compression != 0 {
		n += 9
	}
	if m.Min != 0 {
		n += 9
	}
	if m.Max != 0 {
		n += 9
	}
	if m.ReciprocalSum != 0 {
		n += 9
	}
	return n
}

func (m *Centroid) Size() (n int) {
	var l int
	_ = l
	if m.Mean != 0 {
		n += 9
	}
	if m.Weight != 0 {
		n += 9
	}
	if len(m.Samples) > 0 {
		n += 1 + sovTdigest(uint64(len(m.Samples)*8)) + len(m.Samples)*8
	}
	return n
}

func sovTdigest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTdigest(x uint64) (n int) {
	return sovTdigest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MergingDigestData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdigest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MergingDigestData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MergingDigestData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainCentroids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTdigest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTdigest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MainCentroids = append(m.MainCentroids, Centroid{})
			if err := m.MainCentroids[len(m.MainCentroids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compression", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Compression = float64(math.Float64frombits(v))
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Min", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Min = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Max", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Max = float64(math.Float64frombits(v))
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReciprocalSum", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ReciprocalSum = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTdigest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdigest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Centroid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTdigest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Centroid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Centroid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mean", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Mean = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Weight = float64(math.Float64frombits(v))
		case 3:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Samples = append(m.Samples, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTdigest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTdigest
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Samples = append(m.Samples, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Samples", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTdigest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTdigest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTdigest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTdigest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTdigest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTdigest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTdigest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTdigest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTdigest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTdigest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTdigest   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tdigest/tdigest.proto", fileDescriptorTdigest) }

var fileDescriptorTdigest = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x17, 0x3b, 0x37, 0xc9, 0x98, 0x6c, 0x01, 0x25, 0x78, 0xa8, 0x65, 0x78, 0xe8, 0xc5,
	0x16, 0xf4, 0xee, 0x61, 0xee, 0x2a, 0x48, 0x7d, 0x00, 0x49, 0xb3, 0x98, 0x05, 0x96, 0xa4, 0x24,
	0x29, 0xee, 0x31, 0x7c, 0x23, 0xaf, 0x3b, 0xfa, 0x04, 0x22, 0xf5, 0x45, 0x64, 0x9f, 0x29, 0xe8,
	0xa9, 0xff, 0xdf, 0xef, 0xff, 0x35, 0x5f, 0x08, 0x3e, 0x0b, 0x6b, 0x25, 0x85, 0x0f, 0x65, 0xfc,
	0x16, 0x8d, 0xb3, 0xc1, 0x92, 0x71, 0xc4, 0x8b, 0x6b, 0xa9, 0xc2, 0xa6, 0xad, 0x0b, 0x6e, 0x75,
	0x29, 0xad, 0xb4, 0x25, 0xf4, 0x75, 0xfb, 0x02, 0x04, 0x00, 0xe9, 0xf7, 0xbf, 0xc5, 0x3b, 0xc2,
	0xf3, 0x07, 0xe1, 0xa4, 0x32, 0x72, 0x05, 0x07, 0xac, 0x58, 0x60, 0xe4, 0x0e, 0x9f, 0x6a, 0xa6,
	0xcc, 0x33, 0x17, 0x26, 0x38, 0xab, 0xd6, 0x9e, 0xa2, 0x2c, 0xc9, 0x27, 0x37, 0xf3, 0xa2, 0xdf,
	0x7a, 0x1f, 0x9b, 0xe5, 0x70, 0xff, 0x79, 0x39, 0xa8, 0xa6, 0x87, 0xf1, 0xde, 0x79, 0x92, 0xe1,
	0x09, 0xb7, 0xba, 0x71, 0xc2, 0x7b, 0x65, 0x0d, 0x3d, 0xca, 0x50, 0x8e, 0xaa, 0xbf, 0x8a, 0xcc,
	0x70, 0xa2, 0x95, 0xa1, 0x09, 0x34, 0x87, 0x08, 0x86, 0xed, 0xe8, 0x30, 0x1a, 0xb6, 0x23, 0x57,
	0x78, 0xea, 0x04, 0x57, 0x8d, 0xb3, 0x9c, 0x6d, 0x9f, 0x5a, 0x4d, 0x8f, 0xa1, 0xfb, 0x2f, 0x17,
	0x8f, 0xf8, 0xa4, 0x5f, 0x4c, 0x08, 0x1e, 0x6a, 0xc1, 0x0c, 0x45, 0x30, 0x08, 0x99, 0x9c, 0xe3,
	0xd1, 0xab, 0x50, 0x72, 0x13, 0xe2, 0x35, 0x22, 0x11, 0x8a, 0xc7, 0x9e, 0xe9, 0x66, 0x2b, 0x3c,
	0x4d, 0xb2, 0x24, 0x47, 0x55, 0x8f, 0xcb, 0xd9, 0xbe, 0x4b, 0xd1, 0x47, 0x97, 0xa2, 0xaf, 0x2e,
	0x45, 0x6f, 0xdf, 0xe9, 0xa0, 0x1e, 0xc1, 0x63, 0xdd, 0xfe, 0x04, 0x00, 0x00, 0xff, 0xff, 0x08,
	0x19, 0x08, 0x36, 0x7d, 0x01, 0x00, 0x00,
}
